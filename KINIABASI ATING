
def binary_to_decimal(binary_string):
    stack = []
    converted_decimal = 0
    power_counter = 0

    # Push each bit of the binary string onto the stack
    for bit in binary_string:
        stack.append(int(bit))

    # Process the bits from right to left
    while stack:
        bit = stack.pop()
        converted_decimal += bit * (2 ** power_counter)
        power_counter += 1

    return converted_decimal

# Test cases
binary_numbers = ['11000101', '10101010', '11111111', '10000000', '1111100000']
for binary_number in binary_numbers:
    decimal_number = binary_to_decimal(binary_number)
    print(f"Binary: {binary_number} -> Decimal: {decimal_number}")

def decimal_to_binary(decimal_number):
    stack = []

    # Convert decimal to binary using the division remainder method
    while decimal_number > 0:
        remainder = decimal_number % 2
        stack.append(remainder)
        decimal_number //= 2

    # Pop elements from the stack to form the binary representation
    binary_string = ''
    while stack:
        binary_string += str(stack.pop())

    return binary_string if binary_string else '0'  # If the input decimal is 0, return '0' as binary

# Test cases
decimal_numbers = [13, 55, 255, 128, 496]
for decimal_number in decimal_numbers:
    binary_number = decimal_to_binary(decimal_number)
    print(f"Decimal: {decimal_number} -> Binary: {binary_number}")


#include <iostream>
#include <stack>
#include <unordered_map>
#include <string>
#include <sstream>

class InfixToPostfixConverter {
private:
    std::string infix_expression;
    std::string postfix_expression;
    std::unordered_map<char, int> operator_precedence_map;

    bool isOperator(char character) {
        return (character == '+' || character == '-' || character == '*' || character == '/');
    }

    bool hasHigherPrecedence(char operator1, char operator2) {
        return operator_precedence_map[operator1] >= operator_precedence_map[operator2];
    }

    void convertToPostfix() {
        std::stack<char> operators;
        postfix_expression = "";

        for (char& character : infix_expression) {
            if (character == ' ') {
                continue;
            } else if (isalnum(character)) {
                postfix_expression += character;
            } else if (character == '(') {
                operators.push(character);
            } else if (character == ')') {
                while (!operators.empty() && operators.top() != '(') {
                    postfix_expression += operators.top();
                    operators.pop();
                }
                operators.pop(); // Discard the '('
            } else if (isOperator(character)) {
                while (!operators.empty() && operators.top() != '(' && hasHigherPrecedence(operators.top(), character)) {
                    postfix_expression += operators.top();
                    operators.pop();
                }
                operators.push(character);
            }
        }

        while (!operators.empty()) {
            postfix_expression += operators.top();
            operators.pop();
        }
    }

public:
    InfixToPostfixConverter() {
        operator_precedence_map['+'] = 1;
        operator_precedence_map['-'] = 1;
        operator_precedence_map['*'] = 2;
        operator_precedence_map['/'] = 2;
    }

    void setInfixExpression(const std::string& expression) {
        infix_expression = expression;
    }

    void showInfixExpression() const {
        std::cout << "Infix Expression: " << infix_expression
